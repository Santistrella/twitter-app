{"ast":null,"code":"import authHeader from './authHeader';\nconst API_HOST = 'http://localhost/api';\n\nconst sendRequest = (resourceName, userOptions = {}, id) => {\n  const defaultOptions = {\n    mode: 'cors'\n  };\n  const defaultHeaders = {\n    \"Content-Type\": 'application/json'\n  };\n  const options = { ...defaultOptions,\n    ...userOptions,\n    headers: { ...defaultHeaders,\n      ...userOptions.headers\n    }\n  };\n  let url = `${API_HOST}/${resourceName}`;\n\n  if (id) {\n    url = `${url}/${id}`;\n  }\n\n  if (options.body && typeof options.body === 'object') {\n    options.body = JSON.stringify(options.body);\n  }\n\n  console.log(options);\n  console.log(url);\n  return fetch(url, options).then(responseObject => {\n    console.log(responseObject);\n\n    if (responseObject.status > 400) {\n      console.log('ee');\n      return responseObject.json();\n    } else if (responseObject.status == 200) {\n      return responseObject.json();\n    }\n  }).then(x => {\n    console.log(x);\n  });\n};\n\nconst createPublicResource = (data, model) => {\n  return sendRequest(model, {\n    method: 'POST',\n    body: data\n  });\n};\n\nconst getPrivateResource = model => {\n  return sendRequest(model, {\n    method: 'GET',\n    headers: authHeader()\n  });\n};\n\nconst createPrivateResource = (data, model) => {\n  return sendRequest(model, {\n    method: 'GET',\n    body: data,\n    headers: authHeader()\n  });\n};\n\nexport default {\n  sendRequest,\n  createPublicResource,\n  createPrivateResource,\n  getPrivateResource\n};","map":{"version":3,"sources":["/home/xim/Documents/Master/twitter-app/front-end/src/Api/index.js"],"names":["authHeader","API_HOST","sendRequest","resourceName","userOptions","id","defaultOptions","mode","defaultHeaders","options","headers","url","body","JSON","stringify","console","log","fetch","then","responseObject","status","json","x","createPublicResource","data","model","method","getPrivateResource","createPrivateResource"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AAEA,MAAMC,QAAQ,GAAG,sBAAjB;;AAEA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,WAAW,GAAG,EAA7B,EAAiCC,EAAjC,KAAwC;AAC1D,QAAMC,cAAc,GAAG;AACrBC,IAAAA,IAAI,EAAE;AADe,GAAvB;AAIA,QAAMC,cAAc,GAAG;AACrB,oBAAgB;AADK,GAAvB;AAIA,QAAMC,OAAO,GAAG,EACd,GAAGH,cADW;AAEd,OAAGF,WAFW;AAGdM,IAAAA,OAAO,EAAE,EACP,GAAGF,cADI;AAEP,SAAGJ,WAAW,CAACM;AAFR;AAHK,GAAhB;AASA,MAAIC,GAAG,GAAI,GAAEV,QAAS,IAAGE,YAAa,EAAtC;;AAEA,MAAIE,EAAJ,EAAQ;AACNM,IAAAA,GAAG,GAAI,GAAEA,GAAI,IAAGN,EAAG,EAAnB;AACD;;AAED,MAAII,OAAO,CAACG,IAAR,IAAgB,OAAOH,OAAO,CAACG,IAAf,KAAwB,QAA5C,EAAsD;AACpDH,IAAAA,OAAO,CAACG,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeL,OAAO,CAACG,IAAvB,CAAf;AACD;;AAEDG,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AAEA,SAAOM,KAAK,CAACN,GAAD,EAAMF,OAAN,CAAL,CAAoBS,IAApB,CAAyBC,cAAc,IAAI;AAChDJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,cAAZ;;AACA,QAAIA,cAAc,CAACC,MAAf,GAAwB,GAA5B,EAAiC;AAC/BL,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,aAAOG,cAAc,CAACE,IAAf,EAAP;AACD,KAHD,MAGO,IAAIF,cAAc,CAACC,MAAf,IAAyB,GAA7B,EAAkC;AACvC,aAAOD,cAAc,CAACE,IAAf,EAAP;AACD;AACF,GARM,EAQJH,IARI,CAQCI,CAAC,IAAI;AACXP,IAAAA,OAAO,CAACC,GAAR,CAAYM,CAAZ;AACD,GAVM,CAAP;AAWD,CA1CD;;AA4CA,MAAMC,oBAAoB,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5C,SAAOvB,WAAW,CAACuB,KAAD,EAAQ;AAACC,IAAAA,MAAM,EAAE,MAAT;AAAiBd,IAAAA,IAAI,EAAEY;AAAvB,GAAR,CAAlB;AACD,CAFD;;AAIA,MAAMG,kBAAkB,GAAIF,KAAD,IAAW;AACpC,SAAOvB,WAAW,CAACuB,KAAD,EAAQ;AAACC,IAAAA,MAAM,EAAE,KAAT;AAAgBhB,IAAAA,OAAO,EAAEV,UAAU;AAAnC,GAAR,CAAlB;AACD,CAFD;;AAIA,MAAM4B,qBAAqB,GAAG,CAACJ,IAAD,EAAOC,KAAP,KAAiB;AAC7C,SAAOvB,WAAW,CAACuB,KAAD,EAAQ;AAACC,IAAAA,MAAM,EAAE,KAAT;AAAgBd,IAAAA,IAAI,EAAEY,IAAtB;AAA4Bd,IAAAA,OAAO,EAAEV,UAAU;AAA/C,GAAR,CAAlB;AACD,CAFD;;AAIA,eAAe;AAAEE,EAAAA,WAAF;AAAeqB,EAAAA,oBAAf;AAAqCK,EAAAA,qBAArC;AAA4DD,EAAAA;AAA5D,CAAf","sourcesContent":["import authHeader from './authHeader'\n\nconst API_HOST = 'http://localhost/api';\n\nconst sendRequest = (resourceName, userOptions = {}, id) => {\n  const defaultOptions = {\n    mode: 'cors',\n  };\n\n  const defaultHeaders = {\n    \"Content-Type\": 'application/json',\n  };\n\n  const options = {\n    ...defaultOptions,\n    ...userOptions,\n    headers: {\n      ...defaultHeaders,\n      ...userOptions.headers,\n    }\n  };\n\n  let url = `${API_HOST}/${resourceName}`;\n\n  if (id) {\n    url = `${url}/${id}`;\n  }\n\n  if (options.body && typeof options.body === 'object') {\n    options.body = JSON.stringify(options.body);\n  }\n\n  console.log(options)\n  console.log(url)\n\n  return fetch(url, options).then(responseObject => {\n    console.log(responseObject)\n    if (responseObject.status > 400) {\n      console.log('ee')\n      return responseObject.json()\n    } else if (responseObject.status == 200) {\n      return responseObject.json()\n    }\n  }).then(x => {\n    console.log(x)\n  });\n}\n\nconst createPublicResource = (data, model) => {\n  return sendRequest(model, {method: 'POST', body: data})\n}\n\nconst getPrivateResource = (model) => {\n  return sendRequest(model, {method: 'GET', headers: authHeader()})\n}\n\nconst createPrivateResource = (data, model) => {\n  return sendRequest(model, {method: 'GET', body: data, headers: authHeader()})\n}\n\nexport default { sendRequest, createPublicResource, createPrivateResource, getPrivateResource } ;"]},"metadata":{},"sourceType":"module"}