'use strict';

var _Object$keys = require("@babel/runtime-corejs3/core-js-stable/object/keys");

var _reduceInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/reduce");

var _Object$entries = require("@babel/runtime-corejs3/core-js-stable/object/entries");

var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");

var _Array$isArray = require("@babel/runtime-corejs3/core-js-stable/array/is-array");

var _JSON$stringify = require("@babel/runtime-corejs3/core-js-stable/json/stringify");

var _getIteratorMethod = require("@babel/runtime-corejs3/core-js/get-iterator-method");

var _Symbol = require("@babel/runtime-corejs3/core-js-stable/symbol");

var _Object$assign = require("@babel/runtime-corejs3/core-js-stable/object/assign");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var React = require('react');
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


var __assign = function () {
  __assign = _Object$assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function __read(o, n) {
  var m = typeof _Symbol === "function" && _getIteratorMethod(o);

  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

var STORE_DEFAULT_NAME = '__STATE_MACHINE__';
var STORE_ACTION_NAME = '__STATE_MACHINE_ACTION_NAME__';
var STATE_MACHINE_DEBUG_NAME = '___STATE_MACHINE_DEBUG__';

var getBrowserStoreData = function (storageType, storeName) {
  var sessionStorageData = storageType.getItem(storeName);

  try {
    return sessionStorageData ? JSON.parse(sessionStorageData) : undefined;
  } catch (_a) {
    return undefined;
  }
};

function storeFactory(storageType, name) {
  var storeName = name || STORE_DEFAULT_NAME;
  var store = getBrowserStoreData(storageType, storeName);

  var getName = function () {
    return storeName;
  };

  var set = function (value) {
    store = value;
  };

  var get = function () {
    return store;
  };

  return {
    set: set,
    get: get,
    getName: getName
  };
}

var isUndefined = function (val) {
  return val === undefined;
};

function setUpDevTools(isDevMode, storageType, getName, getStore) {
  if (typeof window === 'undefined' || !isDevMode) return; // @ts-ignore

  window.STATE_MACHINE_DEBUG = function (value) {
    return storageType.setItem(STATE_MACHINE_DEBUG_NAME, value);
  }; // @ts-ignore


  window.STATE_MACHINE_RESET = function () {
    return storageType.clear();
  }; // @ts-ignore


  window.STATE_MACHINE_GET_STORE = function () {
    return storageType.getItem(getName());
  }; // @ts-ignore


  window.STATE_MACHINE_SAVE_TO = function (name) {
    return window.localStorage.setItem(name, _JSON$stringify(getStore()));
  }; // @ts-ignore


  window.STATE_MACHINE_LOAD = function (_a) {
    var storeName = _a.storeName,
        data = _a.data;
    return storageType.setItem(getName() || STATE_MACHINE_DEBUG_NAME, data || window.localStorage.getItem(storeName) || '');
  };
}

var StateMachineContext = React.createContext({
  store: {},
  updateStore: function (payload) {
    return payload;
  }
});

var transformStore = function (_a) {
  var transform = _a.transform,
      externalStoreName = _a.externalStoreName,
      storageType = _a.storageType,
      store = _a.store;
  return transform({
    externalStoreData: getBrowserStoreData(storageType, externalStoreName),
    currentStoreData: store
  });
};

function getSyncStoreData(defaultStoreData, options, storageType) {
  var store = defaultStoreData;
  var syncStoreOption = options.syncStores;
  if (!syncStoreOption) return store;

  try {
    if (_Array$isArray(syncStoreOption)) {
      _forEachInstanceProperty(syncStoreOption).call(syncStoreOption, function (option) {
        store = transformStore({
          transform: option.transform,
          externalStoreName: option.externalStoreName,
          storageType: storageType,
          store: store
        });
      });
    } else if (syncStoreOption.externalStoreName && typeof syncStoreOption.transform === 'function' && typeof syncStoreOption.externalStoreName === 'string') {
      return transformStore({
        transform: syncStoreOption.transform,
        externalStoreName: syncStoreOption.externalStoreName,
        storageType: storageType,
        store: store
      });
    } else {
      var _context;

      _forEachInstanceProperty(_context = _Object$entries(syncStoreOption)).call(_context, function (_a) {
        var _b = __read(_a, 2),
            key = _b[0],
            values = _b[1];

        var browserStore = getBrowserStoreData(storageType, key);

        _forEachInstanceProperty(values).call(values, function (value) {
          var _a;

          store = __assign(__assign({}, store), (_a = {}, _a[value] = __assign(__assign({}, store[value]), browserStore[value]), _a));
        });
      });
    }
  } catch (_a) {
    return store;
  }

  return store;
}

var isClient = typeof window !== 'undefined';
var isDevMode = process.env.NODE_ENV !== 'production';
var storageType = isClient ? window.sessionStorage : {
  getItem: function (payload) {
    return payload;
  },
  setItem: function (payload) {
    return payload;
  },
  clear: function () {},
  length: 0,
  key: function (payload) {
    return payload.toString();
  },
  removeItem: function () {}
};
var getStore;
var setStore;
var getName;
var middleWaresArray = [];

var middleWare = function (data) {
  if (data === void 0) {
    data = '';
  }

  if (data) {
    // @ts-ignore
    window[STORE_ACTION_NAME] = data;
  }

  return data;
};

function setStorageType(type) {
  storageType = type;
}

function createStore(defaultStoreData, options) {
  if (options === void 0) {
    options = {
      name: STORE_DEFAULT_NAME,
      middleWares: [],
      syncStores: undefined
    };
  }

  var storeName = options ? options.name : STORE_DEFAULT_NAME;
  var methods = storeFactory(storageType, storeName);

  if (isDevMode && isClient) {
    // @ts-ignore
    window['STATE_MACHINE_NAME'] = storeName;
  }

  getName = methods.getName;
  getStore = methods.get;
  setStore = methods.set;
  middleWaresArray = options.middleWares;
  setUpDevTools(isDevMode, storageType, getName, getStore);
  setStore(getSyncStoreData(getStore() || defaultStoreData, options, storageType));
}

function StateMachineProvider(props) {
  var _a = __read(React.useState(getStore()), 2),
      globalState = _a[0],
      updateStore = _a[1];

  var value = React.useMemo(function () {
    return {
      store: globalState,
      updateStore: updateStore
    };
  }, [globalState]); // @ts-ignore

  return React.createElement(StateMachineContext.Provider, __assign({
    value: value
  }, props));
}

var actionTemplate = function (_a) {
  var options = _a.options,
      callback = _a.callback,
      updateStore = _a.updateStore;
  return function (payload) {
    var result;
    var debugName = callback ? callback.name : '';

    if (isDevMode) {
      middleWare(debugName);
    }

    if (callback) {
      result = callback(getStore(), payload);
    }

    setStore(isUndefined(result) ? getStore() : result);
    storageType.setItem(getName(), _JSON$stringify(getStore()));

    if (isUndefined(options) || options && options.shouldReRenderApp !== false) {
      var pipeData = getStore();

      if (_Array$isArray(middleWaresArray) && middleWaresArray.length) {
        pipeData = _reduceInstanceProperty(middleWaresArray).call(middleWaresArray, function (currentValue, currentFunction) {
          return currentFunction(currentValue) || currentValue;
        }, pipeData);
      }

      updateStore(pipeData);
    }
  };
};

function useStateMachine(updateStoreFunction, options) {
  var _a = React.useContext(StateMachineContext),
      globalState = _a.store,
      updateStore = _a.updateStore;

  if (updateStoreFunction && _Object$keys(updateStoreFunction).length) {
    var _context2;

    return {
      actions: _reduceInstanceProperty(_context2 = _Object$entries(updateStoreFunction)).call(_context2, function (previous, _a) {
        var _b;

        var _c = __read(_a, 2),
            key = _c[0],
            callback = _c[1];

        return __assign(__assign({}, previous), (_b = {}, _b[key] = React.useCallback(actionTemplate({
          options: options,
          callback: callback,
          updateStore: updateStore
        }), []), _b));
      }, {}),
      action: function (p) {
        return p;
      },
      state: globalState
    };
  }

  return {
    actions: {},
    action: React.useCallback(updateStoreFunction ? actionTemplate({
      options: options,
      callback: updateStoreFunction,
      updateStore: updateStore
    }) : function () {}, []),
    state: globalState
  };
}

exports.StateMachineContext = StateMachineContext;
exports.StateMachineProvider = StateMachineProvider;
exports.createStore = createStore;
exports.setStorageType = setStorageType;
exports.useStateMachine = useStateMachine;
